{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","generateTable","tr1","state","table1","rows","forEach","row","index","col1","col2","tr2","table2","header1","header2","html","style","padding","border","type","value","this","onChange","e","setState","target","map","makeNewRow","length","table","push","console","log","onClick","splice","paddingTop","cols","readOnly","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c3cb6637.chunk.js","sourcesContent":["\nimport './App.css';\nimport React from 'react';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      table1: {\n        header1: \"\",\n        header2: \"\",\n        rows: [{\n          col1: \"\",\n          col2: \"\"\n        }]\n      },\n      table2: {\n        header1: \"\",\n        header2: \"\",\n        rows: [{\n          col1: \"\",\n          col2: \"\"\n        }]\n      },\n      html: \"\"\n    }\n  }\n\n  render() {\n    const table = (<div>\n      <div style={{ padding: \"20px\" }}>\n        <div >Table 1</div>\n        <table style={{ border: \"1px solid gray\", padding: \"20px\" }}>\n          <thead>\n            <tr>\n              <th><input type=\"text\" value={this.state.table1.header1} onChange={(e) => {\n                this.setState(state => ({\n                  table1: { ...state.table1, header1: e.target.value }\n                }));\n              }}></input></th>\n              <th><input type=\"text\" value={this.state.table1.header2} onChange={(e) => {\n                this.setState(state => ({\n                  table1: { ...state.table1, header2: e.target.value }\n                }));\n              }}></input></th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.state.table1.rows.map((row, index) => (\n              <tr key={index}>\n                <td><input type=\"text\" value={row.col1} onChange={(e) => {\n                  this.setState(state => {\n                    let makeNewRow = false;\n                    if (index === this.state.table1.rows.length - 1) {\n                      makeNewRow = true;\n                    }\n                    let table = { ...state.table1 };\n                    table.rows[index].col1 = e.target.value;\n                    if (makeNewRow) {\n                      table.rows.push({\n                        col1: \"\",\n                        col2: \"\"\n                      });\n                      console.log(\"added row\");\n                    }\n                    return ({\n                      table1: table\n                    });\n                  });\n                }}></input></td>\n                <td><input type=\"text\" value={row.col2} onChange={(e) => {\n                  this.setState(state => {\n                    let makeNewRow = false;\n                    if (index === this.state.table1.rows.length - 1) {\n                      makeNewRow = true;\n                    }\n                    let table = { ...state.table1 };\n                    table.rows[index].col2 = e.target.value;\n                    if (makeNewRow) {\n                      table.rows.push({\n                        col1: \"\",\n                        col2: \"\"\n                      });\n                      console.log(\"added row\");\n                    }\n                    return ({\n                      table1: table\n                    });\n                  });\n                }}></input></td>\n                <td><button onClick={e => {\n                  let table = { ...this.state.table1 };\n                  if (table.rows.length === 1) return;\n                  table.rows.splice(index, 1);\n                  this.setState({\n                    table1: table\n                  });\n                }}>X</button></td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n        <div style={{ paddingTop: \"30px\" }}>Table 2</div>\n        <table style={{ border: \"1px solid gray\", padding: \"20px\" }} >\n          <thead>\n            <tr>\n              <th><input type=\"text\" value={this.state.table2.header1} onChange={(e) => {\n                this.setState(state => ({\n                  table2: { ...state.table2, header1: e.target.value }\n                }));\n              }}></input></th>\n              <th><input type=\"text\" value={this.state.table2.header2} onChange={(e) => {\n                this.setState(state => ({\n                  table2: { ...state.table2, header2: e.target.value }\n                }));\n              }}></input></th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.state.table2.rows.map((row, index) => (\n              <tr key={index}>\n                <td><input type=\"text\" value={row.col1} onChange={(e) => {\n                  this.setState(state => {\n                    let makeNewRow = false;\n                    if (index === this.state.table2.rows.length - 1) {\n                      makeNewRow = true;\n                    }\n                    let table = { ...state.table2 };\n                    table.rows[index].col1 = e.target.value;\n                    if (makeNewRow) {\n                      table.rows.push({\n                        col1: \"\",\n                        col2: \"\"\n                      });\n                      console.log(\"added row\");\n                    }\n                    return ({\n                      table2: table\n                    });\n                  });\n                }}></input></td>\n                <td><input type=\"text\" value={row.col2} onChange={(e) => {\n                  this.setState(state => {\n                    let makeNewRow = false;\n                    if (index === this.state.table2.rows.length - 1) {\n                      makeNewRow = true;\n                    }\n                    let table = { ...state.table2 };\n                    table.rows[index].col2 = e.target.value;\n                    if (makeNewRow) {\n                      table.rows.push({\n                        col1: \"\",\n                        col2: \"\"\n                      });\n                      console.log(\"added row\");\n                    }\n                    return ({\n                      table2: table\n                    });\n                  });\n                }}></input></td>\n                <td><button onClick={e => {\n                  let table = { ...this.state.table2 };\n                  if (table.rows.length === 1) return;\n                  table.rows.splice(index, 1);\n                  this.setState({\n                    table2: table\n                  });\n                }}>X</button></td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n      <div style={{ padding: \"20px\" }}>\n        <button onClick={e => this.setState({\n          html: this.generateTable()\n        })}>Generate code</button>\n      </div>\n      <div style={{ padding: \"20px\" }}>\n        <textarea value={this.state.html} rows={\"30\"} cols={100} readOnly={true}>\n        </textarea>\n      </div>\n      {/* <iframe src={new Blob(['hello'], {type : 'text/html'})} title={\"dummy\"}></iframe> */}\n    </div>)\n    return table;\n  }\n\n  generateTable = () => {\n    let tr1 = \"\";\n    this.state.table1.rows.forEach((row, index) => {\n      if (row.col1 !== \"\" && row.col2 !== \"\")\n        tr1 += \"<tr>\\n<td scope='row'>\" + (index + 1) + \"</td>\\n<td>\" + row.col1 + \"</td>\\n<td>\" + row.col2 + \"</td>\\n</tr>\";\n    });\n    let tr2 = \"\";\n    this.state.table2.rows.forEach((row, index) => {\n      if (row.col1 !== \"\" && row.col2 !== \"\")\n        tr2 += \"<tr>\\n<td scope='row'>\" + (index + 1) + \"</td>\\n<td>\" + row.col1 + \"</td>\\n<td>\" + row.col2 + \"</td>\\n</tr>\";\n    });\n    return `<table class=\"table\">\n    <thead class=\"thead-dark\">\n      <tr>\n        <th scope=\"col\">#</th>\n        <th scope=\"col\">${this.state.table1.header1}</th>\n        <th scope=\"col\">${this.state.table1.header2}</th>\n      </tr>\n    </thead>\n    <tbody>\n      ${tr1}\n    </tbody>\n  </table>\n  <table class=\"table\">\n    <thead class=\"thead-dark\">\n      <tr>\n        <th scope=\"col\">#</th>\n        <th scope=\"col\">${this.state.table2.header1}</th>\n        <th scope=\"col\">${this.state.table2.header2}</th>\n      </tr>\n    </thead>\n    <tbody>\n      ${tr2}\n    </tbody>\n  </table>`;\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}